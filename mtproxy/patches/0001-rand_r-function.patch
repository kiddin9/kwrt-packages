Index: mtproxy/jobs/jobs.c
===================================================================
--- mtproxy.orig/jobs/jobs.c
+++ mtproxy/jobs/jobs.c
@@ -368,36 +368,6 @@ struct job_thread *main_job_thread;
 __thread struct job_thread *this_job_thread;
 __thread job_t this_job;
 
-long int lrand48_j (void) {
-  if (this_job_thread) {
-    long int t;
-    lrand48_r (&this_job_thread->rand_data, &t);
-    return t;
-  } else {
-    return lrand48 ();
-  }
-}
-
-long int mrand48_j (void) {
-  if (this_job_thread) {
-    long int t;
-    mrand48_r (&this_job_thread->rand_data, &t);
-    return t;
-  } else {
-    return mrand48 ();
-  }
-}
-
-double drand48_j (void) {
-  if (this_job_thread) {
-    double t;
-    drand48_r (&this_job_thread->rand_data, &t);
-    return t;
-  } else {
-    return drand48 ();
-  }
-}
-
 struct mp_queue MainJobQueue __attribute__((aligned(128)));
 
 static struct thread_callback *jobs_cb_list;
@@ -463,7 +433,10 @@ int create_job_thread_ex (int thread_cla
   JT->id = i;
   assert (JT->job_queue);
 
-  srand48_r (rdtsc () ^ lrand48 (), &JT->rand_data);
+
+  // Initialize random seed
+  unsigned int seed = (unsigned int)(rdtsc() ^ (unsigned long)JT ^ time(NULL));
+  JT->rand_seed = seed ? seed : 1;
 
 
   if (thread_class != JC_MAIN) {
Index: mtproxy/jobs/jobs.h
===================================================================
--- mtproxy.orig/jobs/jobs.h
+++ mtproxy/jobs/jobs.h
@@ -22,6 +22,7 @@
 #pragma once
 
 #include <stdlib.h>
+#include <time.h>
 #include <string.h>
 #include <semaphore.h>
 #include "net/net-events.h"
@@ -231,7 +232,7 @@ struct job_thread {
   long long jobs_created;
   long long jobs_active;
   int thread_system_id;
-  struct drand48_data rand_data;
+  unsigned int rand_seed;
   job_t timer_manager;
   double wakeup_time;
   struct job_class *job_class;
@@ -262,9 +263,31 @@ struct job_timer_info {
 
 #define MAX_JOB_THREADS		256
 
-long int lrand48_j (void);
-long int mrand48_j (void);
-double drand48_j (void);
+static inline void init_rand_seed (struct job_thread *JT) {
+  if (JT->rand_seed == 0) {
+    unsigned int seed = (unsigned int)time(NULL) ^ (unsigned int)getpid() ^ (unsigned long)JT;
+    seed ^= (unsigned int)((unsigned long)pthread_self() & 0xFFFFFFFFUL);
+    JT->rand_seed = seed ? seed : 1;
+  }
+}
+
+static inline long int lrand48_j (void) {
+  struct job_thread *JT = this_job_thread;
+  init_rand_seed(JT);
+  return rand_r(&JT->rand_seed);
+}
+
+static inline long int mrand48_j (void) {
+  struct job_thread *JT = this_job_thread;
+  init_rand_seed(JT);
+  return (long int)rand_r(&JT->rand_seed) - RAND_MAX/2;
+}
+
+static inline double drand48_j (void) {
+  struct job_thread *JT = this_job_thread;
+  init_rand_seed(JT);
+  return (double)rand_r(&JT->rand_seed) / (RAND_MAX + 1.0);
+}
 
 int init_async_jobs (void);
 int create_job_class (int job_class, int min_threads, int max_threads, int excl);
